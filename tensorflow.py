# -*- coding: utf-8 -*-
"""tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18l0P5M66cZtMqr-_Gkd6-0P44NVrlOPJ
"""

import tensorflow as tf
import numpy as np
from tensorflow import keras

"""x: -1 0 1 2 3 4 


y: -2 1 4 7 10 13

relação Y=3X+1.
"""

#rede neural mais simples possível: uma camada, com um neurônio e a forma de entrada dela tem apenas um valor
model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])

"""**função loss** = mede as respostas adivinhadas em relação às respostas corretas e avalia o desempenho da qualidade

**função optimizer** = faz outra suposição. Com base na função de perda, ela tenta minimizar a perda.

**mean_squared_error** (erro quadrático médio) = fornece a média de diferença quadrática entre a predição do modelo e o valor de destino

*Fonte: https://www.ibm.com/docs/pt-br/cloud-paks/cp-data/3.5.0?topic=overview-mean-squared-error*

**descendente estocástico (sgd)** = para o otimizador. 
O método do **Gradiente Descendente** (também chamado Gradiente Descendente Batch) utiliza – em cada iteração – toda a amostra de treino.
O **Gradiente Descendente Estocástico** minimiza esses problemas, pois utiliza em cada iteração apenas uma observação.

*Fonte: http://cursos.leg.ufpr.br/ML4all/apoio/Gradiente.html#gradiente_descendente_estoc%C3%A1stico*
"""

model.compile(optimizer='sgd', loss='mean_squared_error')

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-2.0, 1.0, 4.0, 7.0, 10.0, 13.0], dtype=float)

"""**Treinando a rede neural**
O processo de treinamento da rede neural, em que aprende a relação entre X's e Y's, está na chamada model.fit. É a etapa em que ele passará pelo loop antes de tentar adivinhar, medir o desempenho do jogo (da perda) ou usar o otimizador para fazer outra estimativa. Isso acontecerá pelo número de períodos [epochs] que você especificar. Ao executar esse código, a perda será exibida em cada época.
"""

model.fit(xs, ys, epochs=500)

"""**Usando o modelo**"""

print(model.predict([9]))